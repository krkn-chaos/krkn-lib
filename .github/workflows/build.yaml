name: Build
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
permissions:
  # https://github.community/t/permissions-nesecary-to-comment-on-a-pr/179047/5
  pull-requests: write
  contents: write
env:
  ELASTIC_URL: "https://localhost"
  ELASTIC_PORT: 9091
  ELASTIC_USER: "elastic"
  ELASTIC_PASSWORD: "test"
jobs:
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      my-key-exists: ${{ steps.my-key-check.outputs.defined }}
    steps:
      - name: Check for Secret availability
        id: my-key-check
        # perform secret check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ secrets.AWS_ACCESS_KEY }}" != '' ]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  format:
    name: Formatting tests
    strategy:
      matrix:
        #python-version: [ '3.9', '3.10', 'pypy3.9' ]
        python-version: [ '3.9' ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Check isort, black, and flake8
        run: |
          pip install black flake8 isort
          isort --profile black .
          black --line-length 79 .
          flake8 .
  build:
    name: Build & Test
    strategy:
      matrix:
        #python-version: [ '3.9', '3.10', 'pypy3.9' ]
        python-version: [ '3.9' ]
    runs-on: ubuntu-latest
    needs: [check-secret]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Fetch version number
        run: |
          echo "NEXT_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create multi-node KinD cluster
        uses: redhat-chaos/actions/kind@main
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      - name: get nodes
        run: |
          kubectl get nodes
      - name: Deploy prometheus
        uses: redhat-chaos/actions/prometheus@main
      - name: Deploy Elasticsearch
        with:
          ELASTIC_PORT: ${{ env.ELASTIC_PORT }}
          RUN_ID: ${{ github.run_id }}
        uses: redhat-chaos/actions/elastic@main
      - name: Download elastic password
        uses: actions/download-artifact@v4
        with:
          name: elastic_password_${{ github.run_id }}
      - name: Set elastic password on env
        run: |
          ELASTIC_PASSWORD=$(cat elastic_password.txt)
          echo "ELASTIC_PASSWORD=$ELASTIC_PASSWORD" >> "$GITHUB_ENV"
      - name: Install project dependencies
        run: poetry install --no-interaction
      - name: Set TEST_WORKDIR
        run: | 
          export TEST_WORKDIR=`pwd`/`date +%s`
          mkdir $TEST_WORKDIR
          echo "TEST_WORKDIR=$TEST_WORKDIR" >> $GITHUB_ENV
      - name: Run tests with coverage
        env:
          ELASTIC_URL: ${{ env.ELASTIC_URL }}
          ELASTIC_PORT: ${{ env.ELASTIC_PORT }}
          ELASTIC_USER: ${{ env.ELASTIC_USER }}
          ELASTIC_PASSWORD: ${{ env.ELASTIC_PASSWORD }}

        run: |
          
          poetry run python3 -m coverage run -a -m unittest discover -v src/krkn_lib/tests/
          poetry run python3 -m coverage html
          poetry run python3 -m coverage json
      - name: Run AWS specific tests with coverage
        env:
          API_USER: ${{ secrets.API_USER }}
          API_PASSWORD: ${{ secrets.API_PASSWORD }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ELASTIC_URL: ${{ env.ELASTIC_URL }}
          ELASTIC_PORT: ${{ env.ELASTIC_PORT }}
          ELASTIC_USER: ${{ env.ELASTIC_USER }}
          ELASTIC_PASSWORD: ${{ env.ELASTIC_PASSWORD }}
        if: needs.check-secret.outputs.my-key-exists == 'true'
        run: |
          poetry run python3 -m coverage run -a -m unittest discover -v src/krkn_lib/aws_tests/
      
      - name: Combine coverage and publish
        if: ${{ success() || failure() }}
        run: |
          poetry run python3 -m coverage html
          poetry run python3 -m coverage json

      - name: Publish coverage report to job summary
    
        if: ${{ matrix.python-version == '3.9'}}
        run: |
          poetry run html2text --ignore-images --ignore-links -b 0 htmlcov/index.html >> $GITHUB_STEP_SUMMARY
      - name: Update version number
        run: |
          sed -i -e "s/0.0.0/${{ env.NEXT_VERSION }}/" pyproject.toml
      - name: Build
        run: |
          poetry build
      - name: Upload json coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage.json
          path: coverage.json
          if-no-files-found: error
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: error
      - name: Upload coverage HTML artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: htmlcov
          if-no-files-found: error
  doc:
    name: Generate and Publish Docs
    runs-on: ubuntu-latest
    needs:
      - build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
        - name: Check out code
          uses: actions/checkout@v3
        - name: Check out doc repo
          uses: actions/checkout@master
          with:
            repository: krkn-chaos/krkn-lib-docs
            path: krkn-lib-docs
            ssh-key: ${{ secrets.KRKN_LIB_DOCS_PRIV_KEY }}
        - name: Download json coverage
          uses: actions/download-artifact@v4
          with:
            name: coverage.json
        - name: Update version number
          if: startsWith(github.ref, 'refs/tags/')
          run: |
            sed -i -e "s/0.0.0/${GITHUB_REF##*/}/" pyproject.toml
            sed -i -e "s/0.0.0/${GITHUB_REF##*/}/" ./docs/conf.py
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: 3.9
        - name: Install Poetry
          run: |
            curl -sSL https://install.python-poetry.org | python3 -
        - name: Install project dependencies
          run: poetry install --no-interaction
        - name: Generate documentation
          run: |
            poetry run sphinx-apidoc -o docs/ -f -a -e src/krkn_lib --doc-project "Krkn Foundation Library"
            poetry run make -C docs html
        - name: Copy documentation on GitHub Page Repo
          env:
            COLOR: red
          run: |
            find krkn-lib-docs/ -type f ! -name 'index.html' -type d ! -name '.git' -delete 
            cp -R docs/build/html/* krkn-lib-docs
            
            # generate coverage badge on previously calculated total coverage
            # and copy in the docs page
            export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
            [[ $TOTAL > 70 ]] && COLOR=green
            echo "TOTAL: $TOTAL"
            echo "COLOR: $COLOR"
            curl "https://img.shields.io/badge/coverage-$TOTAL%25-$COLOR" > ./krkn-lib-docs/coverage_badge.svg
        - name: Push updated HTML documentation
          run: |
            cd krkn-lib-docs
            git add .
            git config user.name "krkn-chaos"
            git config user.email "<>"
            git commit -m "[KRKN LIB] API documentation ${GITHUB_REF##*/}" || true
            git push

  publish:
    name: Publish Library on PyPi
    runs-on: ubuntu-latest
    needs:
      - build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Install twine
        run: pip install -U twine packaging==24.2
      - name: Publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{secrets.PYPI_TOKEN}}
          TWINE_NON_INTERACTIVE: true
        run: twine upload dist/*